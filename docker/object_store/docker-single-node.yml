version: '3.8'
services:
  minio1:
    image: minio/minio:latest
    hostname: minio1
    volumes:
      - ${DMOD_OBJECT_STORE_HOST_DIR_1:?No host data directory 1 for object store storage provided}:/export1
    expose:
      - 9000
      - 9001
    ports:
      - ${DMOD_OBJECT_STORE_1_HOST_PORT:-9000}:9000
      - ${DMOD_OBJECT_STORE_1_CONSOLE_HOST_PORT:-9001}:9001
    networks:
      - mpi-net
      - requests-net
    deploy:
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
      placement:
        constraints:
          - node.labels.minio1==true
    command: server /export1 --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    secrets:
      - source: secret_key
        target: secret_key
      - source: access_key
        target: access_key
      - source: exec_user_passwd
        target: exec_user_passwd
      - source: exec_user_name
        target: exec_user_name

networks:
  mpi-net:
    external: true
    name: ${DOCKER_MPI_NET_NAME}
  requests-net:
    external: true
    name: ${DOCKER_REQUESTS_NET_NAME}

secrets:
  secret_key:
    file: ${DMOD_OBJECT_STORE_ADMIN_USER_PASSWD_SECRET_FILE:?}
  access_key:
    file: ${DMOD_OBJECT_STORE_ADMIN_USER_NAME_SECRET_FILE:?}
  # Note that these need to be in environment, as other things also use them (or at least the values in the file)
  # However, our custom stack naming (i.e., with prefix) messes up just simply reusing the secret across stacks
  exec_user_passwd:
    file: ${DMOD_OBJECT_STORE_EXEC_USER_PASSWD_SECRET_FILE:?}
  exec_user_name:
    file: ${DMOD_OBJECT_STORE_EXEC_USER_NAME_SECRET_FILE:?}


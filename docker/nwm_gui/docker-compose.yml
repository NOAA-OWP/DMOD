version: "3.7"

services:
  # Define a container belonging exclusively to the web server
  web_server:
    image: nginx:1.16
    networks:
      - request-listener-net
    # Only restart if a failure occurs
    restart: on-failure
    ports:
      - ${DOCKER_GUI_WEB_SERVER_HOST_PORT:-8081}:80
    # Link everything within the static volume to /usr/maas_portal/static within the container -
    # this will help share resources
    volumes:
      - ${DMOD_APP_STATIC:?}:/usr/maas_portal/static
      - ${DOCKER_GUI_WEB_SERVER_CONFIG_FILE:-/docker/nwm_gui/web_server/nginx/default.conf}:/etc/nginx/conf.d/default.conf
    # Make this container depend on the container holding the application server
    # TODO: this appears to break things now for some reason, despite documentation suggesting it is still supported
    #depends_on:
    #  - app_server
    deploy:
       placement:
         constraints:
           - ${DOCKER_GUI_DEPLOY_CONSTRAINT_1:-node.role==manager}
           - ${DOCKER_GUI_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
  
  # Define a container belonging exclusively to our django application
  app_server:
    image: maas-portal-development
    build:
      context: ../..
      dockerfile: ./docker/nwm_gui/app_server/Dockerfile
      args:
        docker_internal_registry: ${DOCKER_INTERNAL_REGISTRY:?Missing DOCKER_INTERNAL_REGISTRY value (see 'Private Docker Registry ' section in example.env)}
        comms_package_name: ${PYTHON_PACKAGE_DIST_NAME_COMMS:?}
    networks:
      - request-listener-net
    # Call this when starting the container
    entrypoint: /usr/maas_portal/entrypoint.sh
    # Only restart if a failure was encountered
    restart: on-failure
    secrets:
        - postgres_password
    environment:
      #- VENV_DIR=${DOCKER_GUI_CONTAINER_VENV_DIR:-}
      #- CERT_PATH # used by dispatch.py
      #- PYTHONUNBUFFERED=1
      - MAAS_ENDPOINT_HOST=${DOCKER_GUI_MAAS_ENDPOINT_HOST:-localhost}
      - MAAS_ENDPOINT_PORT=${DOCKER_REQUESTS_HOST_PORT:-3012}
      - MAAS_PORTAL_DEBUG=${DOCKER_GUI_MAAS_PORTAL_DEBUG:-true}
      - SQL_ENGINE=django.db.backends.postgresql
      - SQL_DATABASE=${DMOD_GUI_POSTGRES_DB:-dmod_dev}
      - SQL_USER=${DMOD_GUI_POSTGRES_USER:?}
      - SQL_HOST=nwm_gui_db
      - SQL_PORT=5432
      - DATABASE=postgres
      - DOCKER_SECRET_POSTGRES_PASS=postgres_password
    volumes:
      - ${DMOD_APP_STATIC:?}:/usr/maas_portal/static
      - ${DMOD_SSL_DIR}/requestsservice:/usr/maas_portal/ssl
      #- ${DOCKER_GUI_HOST_VENV_DIR:-/tmp/blah}:${DOCKER_GUI_CONTAINER_VENV_DIR:-/tmp/blah}
    # Expose Django's port to the internal network so that the web server may access it
    expose:
      - 8000
    deploy:
       placement:
         constraints:
           - ${DOCKER_GUI_DEPLOY_CONSTRAINT_1:-node.role==manager}
           - ${DOCKER_GUI_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
  db:
    image: postgres:13.3-alpine
    networks:
      - request-listener-net
    volumes:
        #- ${DMOD_GUI_POSTGRES_DATA:?}:/var/lib/postgresql/data
        - dmod_db_volume:/var/lib/postgresql/data
    secrets:
        - postgres_password
    environment:
        - POSTGRES_USER=${DMOD_GUI_POSTGRES_USER:?}
        - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
        - POSTGRES_DB=${DMOD_GUI_POSTGRES_DB:-dmod_dev}
    deploy:
       placement:
         constraints:
           - ${DOCKER_GUI_DEPLOY_CONSTRAINT_1:-node.role==manager}
           - ${DOCKER_GUI_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}

networks:
  request-listener-net:
    external: true
    name: ${DOCKER_REQUESTS_NET_NAME}

secrets:
  postgres_password:
    file: ../secrets/postgres_password.txt
# Define persistent volumes that may be shared and persisted between containers
volumes:
    dmod_db_volume:
#        driver: local
#        driver_opts:
#            type: none
#            o: bind
#    static_volume:

version: "3.7"

services:
  scheduler-service:
    image: ${DOCKER_INTERNAL_REGISTRY:?Missing DOCKER_INTERNAL_REGISTRY value (see 'Private Docker Registry ' section in example.env)}/scheduler-service
    networks:
      - mpi-net
      - requests-net
    ports:
        - "3013:3013"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../../${DOCKER_VOL_DOMAINS?}:/nwm/domains
      - ../../ssl:/ssl
      #- ${DOCKER_VOL_ANALYSIS_ASSIM}:/nwm/conus
      #- /apd_common/anthro/:/apd_common/anthro
    deploy:
      placement:
        constraints:
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
    secrets:
      - myredis_pass
    environment:
      - LISTEN_PORT=${DOCKER_SCHEDULER_CONTAINER_PORT:-3013}
      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_SCHEDULER_SERVICE:?}
      - SERVICE_SSL_DIR=${DOCKER_SCHEDULER_CONTAINER_SERVICE_SSL_DIR:-/ssl/scheduler}
      - DOCKER_SECRET_REDIS_PASS=myredis_pass
      - REDIS_HOST=${DOCKER_REDIS_SERVICE_ALIAS:-redis}
  myredis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      requests-net:
        aliases:
          - ${DOCKER_REDIS_SERVICE_ALIAS:-redis}
    entrypoint: "/entrypoint.sh"
    volumes:
      - ./myredis/entrypoint.sh:/entrypoint.sh
      - ./myredis/redis.conf:/usr/local/etc/redis/redis.conf
    deploy:
      placement:
        constraints:
          - ${DOCKER_MPIMASTER_DEPLOY_CONSTRAINT_1:--node.role==manager}
          - ${DOCKER_MPIMASTER_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
    secrets:
      - myredis_pass
    environment:
      # Used by the entrypoint.sh script
      - DOCKER_SECRET_REDIS_PASS=myredis_pass
  request-service:
    image: ${DOCKER_INTERNAL_REGISTRY:?}/nwm-request-service
    networks:
      #- mpi-net
      - requests-net
    deploy:
      #mode: global
      placement:
        constraints:
          # FIXME find a way to map one worker to each worker node automatically???
          - ${DOCKER_REQUESTS_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_REQUESTS_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
      replicas: 1
    secrets:
      - myredis_pass
    environment:
      - REDIS_HOST=${DOCKER_REDIS_SERVICE_ALIAS:-redis}
      #- REDIS_PORT=
      #- REDIS_USER=
      - DOCKER_SECRET_REDIS_PASS=myredis_pass
      - LISTEN_PORT=${DOCKER_REQUESTS_CONTAINER_PORT:-3012}
      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_REQUEST_SERVICE:?}
      - SERVICE_SSL_DIR=${DOCKER_REQUESTS_CONTAINER_SERVICE_SSL_DIR:-/ssl}
      - SCHEDULER_ENDPOINT_HOST=${DOCKER_REQUESTS_SCHEDULER_ENDPOINT_HOST:?}
      - SCHEDULER_ENDPOINT_PORT=${DOCKER_SCHEDULER_PORT:-3013}
      - SCHEDULER_CLIENT_SSL_DIR=${DOCKER_REQUESTS_CONTAINER_CLIENT_SSL_DIR:-/ssl}
      #- VENV_DIR=${DOCKER_REQUESTS_CONTAINER_VENV_DIR:-}
    working_dir: /code
    ports:
      - "${DOCKER_REQUESTS_HOST_PORT:-3012}:${DOCKER_REQUESTS_CONTAINER_PORT:-3012}"
    volumes:
      - ../../ssl:/ssl
    #  - ./request_handler:/code

networks:
    mpi-net:
        external: true
        name: ${DOCKER_MPI_NET_NAME}
    requests-net:
        external: true
        name: ${DOCKER_REQUESTS_NET_NAME}

# Define persistent volumes that may be shared and persisted between containers
volumes:
  gui_static_volume:

secrets:
  myredis_pass:
    file: ../secrets/myredis_password.txt

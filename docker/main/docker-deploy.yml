version: "3.7"

services:
  scheduler-service:
    image: ${DOCKER_INTERNAL_REGISTRY:?Missing DOCKER_INTERNAL_REGISTRY value (see 'Private Docker Registry ' section in example.env)}/scheduler-service
    networks:
      - mpi-net
      - requests-net
    ports:
        - "3013:3013"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DMOD_SSL_DIR:?}:/ssl
      - ${SCHEDULER_RESOURCE_DIR:?}/resources.yaml:/code/resources.yaml
      - ${SCHEDULER_RESOURCE_DIR:?}/image_and_domain.yaml:/code/image_and_domain.yaml
    deploy:
      placement:
        constraints:
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
    secrets:
      - myredis_pass
    environment:
      - LISTEN_PORT=${DOCKER_SCHEDULER_CONTAINER_PORT:-3013}
      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_SCHEDULER_SERVICE:?}
      - SERVICE_SSL_DIR=${DOCKER_SCHEDULER_CONTAINER_SERVICE_SSL_DIR:-/ssl/scheduler}
      - DOCKER_SECRET_REDIS_PASS=myredis_pass
      - REDIS_HOST=${DOCKER_REDIS_SERVICE_ALIAS:-myredis}
    #depends_on:
    #  - myredis
  myredis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      requests-net:
        aliases:
          - ${DOCKER_REDIS_SERVICE_ALIAS:-redis}
    entrypoint: "/entrypoint.sh"
    volumes:
      - ${REDIS_CONF_DIR:?}/entrypoint.sh:/entrypoint.sh
      - ${REDIS_CONF_DIR:?}/redis.conf:/usr/local/etc/redis/redis.conf
    deploy:
      placement:
        constraints:
          - ${DOCKER_MPIMASTER_DEPLOY_CONSTRAINT_1:--node.role==manager}
          - ${DOCKER_MPIMASTER_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
    secrets:
      - myredis_pass
    environment:
      # Used by the entrypoint.sh script
      - DOCKER_SECRET_REDIS_PASS=myredis_pass
  request-service:
    image: ${DOCKER_INTERNAL_REGISTRY:?}/nwm-request-service
    networks:
      #- mpi-net
      - requests-net
    deploy:
      #mode: global
      placement:
        constraints:
          # FIXME find a way to map one worker to each worker node automatically???
          - ${DOCKER_REQUESTS_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_REQUESTS_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
      replicas: 1
    secrets:
      - myredis_pass
    environment:
      - REDIS_HOST=${DOCKER_REDIS_SERVICE_ALIAS:-redis}
      #- REDIS_PORT=
      #- REDIS_USER=
      - DOCKER_SECRET_REDIS_PASS=myredis_pass
      - LISTEN_PORT=${DOCKER_REQUESTS_CONTAINER_PORT:-3012}
      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_REQUEST_SERVICE:?}
      - SERVICE_SSL_DIR=${DOCKER_REQUESTS_CONTAINER_SERVICE_SSL_DIR:-/ssl/requests}
      - SCHEDULER_ENDPOINT_HOST=${DOCKER_REQUESTS_SCHEDULER_ENDPOINT_HOST:?}
      - SCHEDULER_ENDPOINT_PORT=${DOCKER_SCHEDULER_PORT:-3013}
      - SCHEDULER_CLIENT_SSL_DIR=${DOCKER_REQUESTS_CONTAINER_CLIENT_SSL_DIR:-/ssl/scheduler}
      - PYCHARM_REMOTE_DEBUG_ACTIVE=${PYCHARM_REMOTE_DEBUG_REQUEST_SERVICE_ACTIVE:-false}
      - PYCHARM_REMOTE_DEBUG_SERVER_HOST=${PYCHARM_REMOTE_DEBUG_SERVER_HOST:-host.docker.internal}
      - PYCHARM_REMOTE_DEBUG_SERVER_PORT=${PYCHARM_REMOTE_DEBUG_SERVER_PORT_REQUEST_SERVICE:-55870}
      #- PYCHARM_REMOTE_DEBUG_VERSION=${PYCHARM_REMOTE_DEBUG_VERSION:-}
      #- VENV_DIR=${DOCKER_REQUESTS_CONTAINER_VENV_DIR:-}
    working_dir: /code
    ports:
      - "${DOCKER_REQUESTS_HOST_PORT:-3012}:${DOCKER_REQUESTS_CONTAINER_PORT:-3012}"
    volumes:
      - ${DMOD_SSL_DIR:?}:/ssl
    #  - ./request_handler:/code
    #depends_on:
    #  - myredis
  subset-service:
    image: ${DOCKER_INTERNAL_REGISTRY:?Missing DOCKER_INTERNAL_REGISTRY value (see 'Private Docker Registry ' section in example.env)}/subset-service
    networks:
      - requests-net
    ports:
      - ${DOCKER_SUBSET_API_PORT:-5001}:${DOCKER_SUBSET_CONTAINER_PORT:-5001}
    volumes:
      - ${HYDROFABRIC_DATA_DIR:?Please set HYDROFABRIC_DATA_DIR for Docker environment in .env config file}:/hydrofabric_data
    deploy:
      placement:
        constraints:
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
    secrets:
      - myredis_pass
    environment:
      - LISTEN_PORT=${DOCKER_SUBSET_CONTAINER_PORT:-5000}
      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_SUBSET_SERVICE:?}
      - FILES_DIRECTORY=/hydrofabric_data
    entrypoint: ["python3", "-m", "${PYTHON_PACKAGE_NAME_SUBSET_SERVICE:?}"]
    command: ["--files-directory", "/hydrofabric_data", "--port", "${DOCKER_SUBSET_CONTAINER_PORT:-5000}"]
  data-service:
    image: ${DOCKER_INTERNAL_REGISTRY:?}/dmod-data-service
    hostname: data-service
    networks:
      - requests-net
    deploy:
      #mode: global
      #placement:
      #  constraints:
      #    - ${DOCKER_REQUESTS_DEPLOY_CONSTRAINT_1:-node.role==manager}
      #    - ${DOCKER_REQUESTS_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
      replicas: 1
    secrets:
      - object_store_exec_user_name
      - object_store_exec_user_passwd
      - myredis_pass
    environment:
      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_DATA_SERVICE:-dmod.dataservice}
      - LISTEN_PORT=${DOCKER_DATASERVICE_CONTAINER_PORT:-3020}
      - SERVICE_SSL_DIR=${DOCKER_DATASERVICE_CONTAINER_SERVICE_SSL_DIR:-/ssl/dataservice}
      - USER_SECRET_NAME=object_store_exec_user_name
      - PASSWD_SECRET_NAME=object_store_exec_user_passwd
      #- REDIS_PORT=
      #- REDIS_USER=
      - REDIS_HOST=${DOCKER_REDIS_SERVICE_ALIAS:-myredis}
      - DOCKER_SECRET_REDIS_PASS=myredis_pass
      - PYCHARM_REMOTE_DEBUG_ACTIVE=${PYCHARM_REMOTE_DEBUG_REQUEST_SERVICE_ACTIVE:-false}
      - PYCHARM_REMOTE_DEBUG_SERVER_HOST=${PYCHARM_REMOTE_DEBUG_SERVER_HOST:-host.docker.internal}
      - PYCHARM_REMOTE_DEBUG_SERVER_PORT=${PYCHARM_REMOTE_DEBUG_SERVER_PORT:-55871}
      #- PYCHARM_REMOTE_DEBUG_VERSION=${PYCHARM_REMOTE_DEBUG_VERSION:-}
      #- VENV_DIR=${DOCKER_REQUESTS_CONTAINER_VENV_DIR:-}
    working_dir: /code
    ports:
      - "${DOCKER_DATASERVICE_HOST_PORT:-3015}:${DOCKER_DATASERVICE_CONTAINER_PORT:-3015}"
    volumes:
      - ${DMOD_SSL_DIR:?}:/ssl
      # TODO: this needs to be fixed, but right now is necessary because the service imports dmod.scheduler for Job
      - /var/run/docker.sock:/var/run/docker.sock
    #  - ./request_handler:/code
    #depends_on:
    #  - myredis
  partitioner-service:
    image: "${DOCKER_INTERNAL_REGISTRY:?Missing DOCKER_INTERNAL_REGISTRY value (see 'Private Docker Registry ' section in example.env)}/partitioner-service:latest"
    networks:
      - mpi-net
      - requests-net
    ports:
      - "${DOCKER_PARTITIONER_SERVICE_CONTAINER_PORT:-3014}:${DOCKER_PARTITIONER_SERVICE_CONTAINER_PORT:-3014}"
    secrets:
      - myredis_pass
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DMOD_SSL_DIR:?}:/ssl
    deploy:
      placement:
        constraints:
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
    entrypoint: [ "python3", "-m", "${PYTHON_PACKAGE_NAME_PARTITIONER_SERVICE:?}" ]
    command: [ "--listen-port", "${DOCKER_PARTITIONER_SERVICE_CONTAINER_PORT:-3014}",
               "--partitioner-image", "${DOCKER_PARTITIONER_IMAGE:-ngen-partitioner}",
               "--image-tag", "${DOCKER_PARTITIONER_IMAGE_TAG:-latest}",
               "--docker-registry", "${DOCKER_INTERNAL_REGISTRY}",
               "--data-service-host", "data-service",
               "--data-service-port", "${DOCKER_DATASERVICE_CONTAINER_PORT:-3020}",
               "--data-service-ssl-dir", "${DOCKER_DATASERVICE_CONTAINER_SERVICE_SSL_DIR:-/ssl/dataservice}",
               "--redis-pass-secret-name", "myredis_pass"]
networks:
    mpi-net:
        external: true
        name: ${DOCKER_MPI_NET_NAME}
    requests-net:
        external: true
        name: ${DOCKER_REQUESTS_NET_NAME}

# Define persistent volumes that may be shared and persisted between containers
volumes:
  gui_static_volume:

secrets:
  myredis_pass:
    file: ../secrets/myredis_password.txt
  # Have to create these here from the same backing files, since the stack prefix causes issue with sharing secrets
  # across stacks
  object_store_exec_user_passwd:
    file: ${DMOD_OBJECT_STORE_EXEC_USER_NAME_SECRET_FILE:?}
  object_store_exec_user_name:
    file: ${DMOD_OBJECT_STORE_EXEC_USER_PASSWD_SECRET_FILE:?}

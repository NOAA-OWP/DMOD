version: "3.7"

services:
  scheduler-service:
    image: ${DOCKER_INTERNAL_REGISTRY:?Missing DOCKER_INTERNAL_REGISTRY value (see 'Private Docker Registry ' section in example.env)}/scheduler-service
    networks:
      - mpi-net
      - main-internal-net
    ports:
        - "3013:3013"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DMOD_SSL_DIR:?}:/ssl
      - ${SCHEDULER_RESOURCE_DIR:?}/resources.yaml:/code/resources.yaml
      - ${SCHEDULER_RESOURCE_DIR:?}/image_and_domain.yaml:/code/image_and_domain.yaml
      # This typically needs to be commented out; intended for development use (see related 'environment' config above)
      #- updated_packages:${UPDATED_PACKAGES_CONTAINER_DIR:?Check if updated packages directory should be used}
    deploy:
      placement:
        constraints:
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
    secrets:
      - redis_pass
    environment:
      - LISTEN_PORT=${DOCKER_SCHEDULER_CONTAINER_PORT:-3013}
      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_SCHEDULER_SERVICE:?}
      - SERVICE_SSL_DIR=/ssl/scheduler-service
      - DOCKER_SECRET_REDIS_PASS=redis_pass
      - REDIS_HOST=${DOCKER_REDIS_SERVICE_ALIAS:-myredis}
      # Way to configure 1 extra mount for workers via env, as '<DMOD_JOB_WORKER_HOST_MOUNT>:/dmod/datasets/from_env:rw'
      - DMOD_JOB_WORKER_HOST_MOUNT=${DMOD_JOB_WORKER_HOST_MOUNT:-}
      - PYCHARM_REMOTE_DEBUG_ACTIVE=${PYCHARM_REMOTE_DEBUG_SCHEDULER_SERVICE_ACTIVE:-false}
      - PYCHARM_REMOTE_DEBUG_SERVER_HOST=${PYCHARM_REMOTE_DEBUG_SERVER_HOST:-host.docker.internal}
      - PYCHARM_REMOTE_DEBUG_SERVER_PORT=${PYCHARM_REMOTE_DEBUG_SERVER_PORT_SCHEDULER_SERVICE:-55872}
      # This typically needs to be commented out; intended for development use (see related 'volume' config below)
      #- UPDATED_PACKAGES_DIR=${UPDATED_PACKAGES_CONTAINER_DIR:?Updated packages directory not set, make sure this should be active}
    #depends_on:
    #  - myredis
  myredis:
    image: redis:7.2
    ports:
      - "6379:6379"
    networks:
      main-internal-net:
        aliases:
          - ${DOCKER_REDIS_SERVICE_ALIAS:-redis}
    entrypoint: "/entrypoint.sh"
    volumes:
      - ${REDIS_CONF_DIR:?}/entrypoint.sh:/entrypoint.sh
      - ${REDIS_CONF_DIR:?}/redis.conf:/usr/local/etc/redis/redis.conf
    deploy:
      placement:
        constraints:
          - ${DOCKER_MPIMASTER_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_MPIMASTER_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
    secrets:
      - redis_pass
    environment:
      # Used by the entrypoint.sh script
      - DOCKER_SECRET_REDIS_PASS=redis_pass
  request-service:
    image: ${DOCKER_INTERNAL_REGISTRY:?}/nwm-request-service
    networks:
      #- mpi-net
      - requests-net
      - main-internal-net
    deploy:
      #mode: global
      placement:
        constraints:
          # FIXME find a way to map one worker to each worker node automatically???
          - ${DOCKER_REQUESTS_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_REQUESTS_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
      replicas: 1
    secrets:
      - redis_pass
    environment:
      - REDIS_HOST=${DOCKER_REDIS_SERVICE_ALIAS:-redis}
      #- REDIS_PORT=
      #- REDIS_USER=
      - DOCKER_SECRET_REDIS_PASS=redis_pass
      - LISTEN_PORT=${DOCKER_REQUESTS_CONTAINER_PORT:-3012}
      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_REQUEST_SERVICE:?}
      - SERVICE_SSL_DIR=/ssl/request-service
      - SCHEDULER_ENDPOINT_HOST=${DOCKER_REQUESTS_SCHEDULER_ENDPOINT_HOST:-scheduler-service}
      - SCHEDULER_ENDPOINT_PORT=${DOCKER_SCHEDULER_PORT:-3013}
      - SCHEDULER_CLIENT_SSL_DIR=/ssl/scheduler-service
      - DATA_SERVICE_ENDPOINT_HOST=${DOCKER_REQUESTS_DATASERVICE_ENDPOINT_HOST:-data-service}
      - DATA_SERVICE_ENDPOINT_PORT=${DOCKER_DATASERVICE_CONTAINER_PORT:-3015}
      - DATA_SERVICE_CLIENT_SSL_DIR=/ssl/data-service
      - EVALUATION_SERVICE_ENDPOINT_HOST=${DOCKER_REQUESTS_EVALUATIONSERVICE_ENDPOINT_HOST:-evaluation-service}
      - EVALUATION_SERVICE_ENDPOINT_PORT=${DOCKER_EVALUATIONSERVICE_CONTAINER_PORT:-3015}
      - EVALUATION_SERVICE_CLIENT_SSL_DIR=/ssl/evaluation-service
      - PARTITIONER_SERVICE_ENDPOINT_HOST=${DOCKER_REQUESTS_PARTITIONERSERVICE_ENDPOINT_HOST:-partitioner-service}
      - PARTITIONER_SERVICE_ENDPOINT_PORT=${DOCKER_PARTITIONER_SERVICE_CONTAINER_PORT:-3014}
      - PARTITIONER_SERVICE_CLIENT_SSL_DIR=/ssl/partitioner-service
      - PYCHARM_REMOTE_DEBUG_ACTIVE=${PYCHARM_REMOTE_DEBUG_REQUEST_SERVICE_ACTIVE:-false}
      - PYCHARM_REMOTE_DEBUG_SERVER_HOST=${PYCHARM_REMOTE_DEBUG_SERVER_HOST:-host.docker.internal}
      - PYCHARM_REMOTE_DEBUG_SERVER_PORT=${PYCHARM_REMOTE_DEBUG_SERVER_PORT_REQUEST_SERVICE:-55870}
      # This typically needs to be commented out; intended for development use (see related 'volume' config below)
      #- UPDATED_PACKAGES_DIR=${UPDATED_PACKAGES_CONTAINER_DIR:?Updated packages directory not set, make sure this should be active}
      #- PYCHARM_REMOTE_DEBUG_VERSION=${PYCHARM_REMOTE_DEBUG_VERSION:-}
      #- VENV_DIR=${DOCKER_REQUESTS_CONTAINER_VENV_DIR:-}
    working_dir: /code
    ports:
      - "${DOCKER_REQUESTS_HOST_PORT:-3012}:${DOCKER_REQUESTS_CONTAINER_PORT:-3012}"
    volumes:
      - ${DMOD_SSL_DIR:?}:/ssl
      # This typically needs to be commented out; intended for development use (see related 'environment' config above)
      #- updated_packages:${UPDATED_PACKAGES_CONTAINER_DIR:?Check if updated packages directory should be used}
    #depends_on:
    #  - myredis
# TODO: service not especially useful with hard-coded hydrofabric bind mount and only single hydrofabric support
# TODO: create issue for re-activating after support added for using multiple (DMOD-dataset-based) hydrofabrics
#  subset-service:
#    image: ${DOCKER_INTERNAL_REGISTRY:?Missing DOCKER_INTERNAL_REGISTRY value (see 'Private Docker Registry ' section in example.env)}/subset-service
#    networks:
#      - main-internal-net
#    ports:
#      - ${DOCKER_SUBSET_API_PORT:-5001}:${DOCKER_SUBSET_CONTAINER_PORT:-5001}
#    volumes:
#      - ${HYDROFABRIC_DATA_DIR:?Please set HYDROFABRIC_DATA_DIR for Docker environment in .env config file}:/hydrofabric_data
#      # This typically needs to be commented out; intended for development use (see related 'environment' config above)
#      #- updated_packages:${UPDATED_PACKAGES_CONTAINER_DIR:?Check if updated packages directory should be used}
#    deploy:
#      placement:
#        constraints:
#          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_1:-node.role==manager}
#          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
#    secrets:
#      - redis_pass
#    environment:
#      - LISTEN_PORT=${DOCKER_SUBSET_CONTAINER_PORT:-5000}
#      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_SUBSET_SERVICE:?}
#      - FILES_DIRECTORY=/hydrofabric_data
#      - PYCHARM_REMOTE_DEBUG_ACTIVE=${PYCHARM_REMOTE_DEBUG_SUBSET_SERVICE_ACTIVE:-false}
#      - PYCHARM_REMOTE_DEBUG_SERVER_HOST=${PYCHARM_REMOTE_DEBUG_SERVER_HOST:-host.docker.internal}
#      - PYCHARM_REMOTE_DEBUG_SERVER_PORT=${PYCHARM_REMOTE_DEBUG_SERVER_PORT_SUBSET_SERVICE:-55874}
#      # This typically needs to be commented out; intended for development use (see related 'volume' config below)
#      #- UPDATED_PACKAGES_DIR=${UPDATED_PACKAGES_CONTAINER_DIR:?Updated packages directory not set, make sure this should be active}
#    command: ["--files-directory", "/hydrofabric_data",
#              "--port", "${DOCKER_SUBSET_CONTAINER_PORT:-5000}",
#              "--crosswalk-file", "${HYRDOFABRIC_CROSSWALK_FILE_BASENAME:-crosswalk.json}"]
  data-service:
    image: ${DOCKER_INTERNAL_REGISTRY:?}/dmod-data-service
    hostname: data-service
    networks:
      - mpi-net
      - main-internal-net
    deploy:
      placement:
        constraints:
          - ${DOCKER_DATA_SERVICE_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_DATA_SERVICE_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
    secrets:
      - object_store_exec_user_name
      - object_store_exec_user_passwd
      - redis_pass
    environment:
      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_DATA_SERVICE:-dmod.dataservice}
      - PORT=${DOCKER_DATASERVICE_CONTAINER_PORT:-3015}
      - CERT_PATH=/ssl/data-service/certificate.pem
      - KEY_PATH=/ssl/data-service/privkey.pem
      - SSL_DIR=/ssl/data-service
      - OBJECT_STORE_HOST=${DMOD_DATA_SERVICE_OBJ_STORE_HOST:-minio-proxy}
      - REDIS_HOST=${DOCKER_REDIS_SERVICE_ALIAS:-myredis}
      - HOST=${DOCKER_DATA_SERVICE_LISTEN_HOST:-0.0.0.0}
      # computed or optional variables. optional vars have associated default value
      # - S3FS_URL_PROTOCOL='http'
      # - S3FS_URL_HOST
      # - S3FS_URL_PORT=9000
      # - S3FS_VOL_IMAGE_NAME='127.0.0.1:5000/s3fs-volume-helper'
      # - S3FS_VOL_IMAGE_TAG='latest'
      # - S3FS_PLUGIN_ALIAS='s3fs'
      # - S3FS_HELPER_NETWORK='host'
      # - REDIS_PORT=6379
      # - OBJECT_STORE_PORT=9000
      # debugging configuration
      - PYCHARM_DEBUG=false
      # - PYCHARM_REMOTE_DEBUG_EGG='/pydevd-pycharm.egg'
      # - REMOTE_DEBUG_HOST=${PYCHARM_REMOTE_DEBUG_SERVER_HOST:-host.docker.internal}
      # - REMOTE_DEBUG_PORT=${PYCHARM_REMOTE_DEBUG_SERVER_PORT_DATA_SERVICE:-55871}
      #- VENV_DIR=${DOCKER_REQUESTS_CONTAINER_VENV_DIR:-}
      # debugging flags
      #- UPDATED_PACKAGES_DIR=${UPDATED_PACKAGES_CONTAINER_DIR:?Updated packages directory not set, make sure this should be active}
    # uncomment to override entry point; intended for development use ONLY
    # entrypoint: ["python", "-m", "uvicorn", "dmod.dataservice.rest_service:app", "--port=8080", "--host=0.0.0.0"]
    working_dir: /code
    ports:
      - "${DOCKER_DATASERVICE_HOST_PORT:-3015}:${DOCKER_DATASERVICE_CONTAINER_PORT:-3015}"
    volumes:
      - ${DMOD_SSL_DIR:?}:/ssl
      # TODO: this needs to be fixed, but right now is necessary because the service imports dmod.scheduler for Job
      - /var/run/docker.sock:/var/run/docker.sock
      # This typically needs to be commented out; intended for development use (see related 'environment' config above)
      #- updated_packages:${UPDATED_PACKAGES_CONTAINER_DIR:?Check if updated packages directory should be used}
  partitioner-service:
    image: "${DOCKER_INTERNAL_REGISTRY:?Missing DOCKER_INTERNAL_REGISTRY value (see 'Private Docker Registry ' section in example.env)}/partitioner-service:latest"
    networks:
      #- mpi-net
      - main-internal-net
    ports:
      - "${DOCKER_PARTITIONER_SERVICE_CONTAINER_PORT:-3014}:${DOCKER_PARTITIONER_SERVICE_CONTAINER_PORT:-3014}"
    secrets:
      - redis_pass
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DMOD_SSL_DIR:?}:/ssl
      # This typically needs to be commented out; intended for development use (see related 'environment' config above)
      #- updated_packages:${UPDATED_PACKAGES_CONTAINER_DIR:?Check if updated packages directory should be used}
    environment:
      - SERVICE_PACKAGE_NAME=${PYTHON_PACKAGE_NAME_PARTITIONER_SERVICE:?}
      - PYCHARM_REMOTE_DEBUG_ACTIVE=${PYCHARM_REMOTE_DEBUG_SCHEDULER_SERVICE_ACTIVE:-false}
      - PYCHARM_REMOTE_DEBUG_SERVER_HOST=${PYCHARM_REMOTE_DEBUG_SERVER_HOST:-host.docker.internal}
      - PYCHARM_REMOTE_DEBUG_SERVER_PORT=${PYCHARM_REMOTE_DEBUG_SERVER_PORT_PARTITIONER_SERVICE:-55873}
      # This typically needs to be commented out; intended for development use (see related 'volume' config below)
      #- UPDATED_PACKAGES_DIR=${UPDATED_PACKAGES_CONTAINER_DIR:?Updated packages directory not set, make sure this should be active}
    deploy:
      placement:
        constraints:
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_1:-node.role==manager}
          - ${DOCKER_SCHEDULER_DEPLOY_CONSTRAINT_2:-node.id!=notrealid_tautology_by_default}
    command: [ "--listen-port", "${DOCKER_PARTITIONER_SERVICE_CONTAINER_PORT:-3014}",
               "--partitioner-image", "${DOCKER_PARTITIONER_IMAGE:-ngen-partitioner}",
               "--image-tag", "${DOCKER_PARTITIONER_IMAGE_TAG:-latest}",
               "--docker-registry", "${DOCKER_INTERNAL_REGISTRY}",
               "--data-service-host", "data-service",
               "--data-service-port", "${DOCKER_DATASERVICE_CONTAINER_PORT:-3015}",
               "--data-service-ssl-dir", "${DOCKER_DATASERVICE_CONTAINER_SERVICE_SSL_DIR:-/ssl/dataservice}",
               "--redis-pass-secret-name", "redis_pass"]
networks:
    mpi-net:
        external: true
        name: ${DOCKER_MPI_NET_NAME}
    main-internal-net:
      external: true
      name: ${DOCKER_MAIN_INTERNAL_NET_NAME}
    requests-net:
        external: true
        name: ${DOCKER_REQUESTS_NET_NAME}

# Define persistent volumes that may be shared and persisted between containers
volumes:
  gui_static_volume:
  # This typically needs to be commented out; intended for development use (see related 'environment' and 'volume'
  # configs above for several services)
  updated_packages:
    external: true

secrets:
  redis_pass:
    file: ${DOCKER_REDIS_SECRET_FILE:?Variable DOCKER_REDIS_SECRET_FILE unset in env; no path to redis password Docker secret file}
  # Have to create these here from the same backing files, since the stack prefix causes issue with sharing secrets
  # across stacks
  object_store_exec_user_passwd:
    file: ${DMOD_OBJECT_STORE_EXEC_USER_PASSWD_SECRET_FILE:?}
  object_store_exec_user_name:
    file: ${DMOD_OBJECT_STORE_EXEC_USER_NAME_SECRET_FILE:?}
